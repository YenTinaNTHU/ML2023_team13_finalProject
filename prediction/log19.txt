import library...
loadind data...
loaded csv file shape: (4000000, 8)
setting time info...
basic time information costing time: 40.141
advanced time information costing time: 21.532
setting geo info...
geo information costing time: 3.796
counting net fare...
counting fixed fee costing time: 0.068
data flitering time: 3.640

After feature engineering: Index(['fare_amount', 'passenger_count', 'year', 'hour', 'is_holiday',
       'from_JKF', 'to_JKF', 'from_LGA', 'to_LGA', 'to_EWR', 'from_Manhattan',
       'to_Manhattan', 'distance', 'direction', 'total_fixed_fees',
       'net_fare'],
      dtype='object'),
 total len: 16

loaded test csv file shape: (9914, 7)
setting time info...
basic time information costing time: 0.087
advanced time information costing time: 0.047
setting geo info...
geo information costing time: 0.033
counting fixed fee...
counting fixed fee costing time: 0.000
data flitering time: 0.002

creating XGBRegressor model...
{'objective': 'reg:squarederror', 'base_score': None, 'booster': 'gbtree', 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': 1, 'enable_categorical': False, 'gamma': None, 'gpu_id': 0, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.008, 'max_delta_step': None, 'max_depth': 5, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'n_estimators': 3000, 'n_jobs': None, 'num_parallel_tree': None, 'predictor': None, 'random_state': 42, 'reg_alpha': None, 'reg_lambda': None, 'scale_pos_weight': None, 'subsample': 0.84, 'tree_method': 'gpu_hist', 'validate_parameters': None, 'verbosity': None}
training model...
total training time: 49 sec
predict result...

remove:
        rn_sample_df.drop(rn_sample_df.index[(rn_sample_df.pickup_longitude < -74.5) | 
           (rn_sample_df.pickup_longitude > -72.5) | 
           (rn_sample_df.pickup_latitude < 40.5) | 
           (rn_sample_df.pickup_latitude > 42)],inplace=True)
        rn_sample_df.drop(rn_sample_df.index[(rn_sample_df.dropoff_longitude < -74.5) | 
                   (rn_sample_df.dropoff_longitude > -72.5) | 
                   (rn_sample_df.dropoff_latitude < 40.5) | 
                   (rn_sample_df.dropoff_latitude > 42)],inplace=True)
        rn_sample_df.drop(rn_sample_df.index[(rn_sample_df.dropoff_longitude == rn_sample_df.pickup_longitude) & 
                   (rn_sample_df.dropoff_latitude == rn_sample_df.dropoff_latitude)],inplace=True)        
        rn_sample_df = rn_sample_df[rn_sample_df.net_fare < 150]